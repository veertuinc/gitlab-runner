// Code generated by mockery v1.1.0. DO NOT EDIT.

package networks

import (
	context "context"

	container "github.com/docker/docker/api/types/container"

	mock "github.com/stretchr/testify/mock"

	types "github.com/docker/docker/api/types"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields: ctx
func (_m *MockManager) Cleanup(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, networkMode
func (_m *MockManager) Create(ctx context.Context, networkMode string) (container.NetworkMode, error) {
	ret := _m.Called(ctx, networkMode)

	var r0 container.NetworkMode
	if rf, ok := ret.Get(0).(func(context.Context, string) container.NetworkMode); ok {
		r0 = rf(ctx, networkMode)
	} else {
		r0 = ret.Get(0).(container.NetworkMode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, networkMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspect provides a mock function with given fields: ctx
func (_m *MockManager) Inspect(ctx context.Context) (types.NetworkResource, error) {
	ret := _m.Called(ctx)

	var r0 types.NetworkResource
	if rf, ok := ret.Get(0).(func(context.Context) types.NetworkResource); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.NetworkResource)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
