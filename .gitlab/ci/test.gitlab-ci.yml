include:
  - template: Security/License-Scanning.gitlab-ci.yml

# Overriding 'License-Scanning.gitlab-ci.yml' template, because
# we need to replace the rules with our own, the same
# as in `.merge_request_pipelines` template.
license_scanning:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_REF_NAME =~ /\Av[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?\z/'

docs lint:
  image: "registry.gitlab.com/gitlab-org/gitlab-docs:lint"
  stage: test
  extends:
  - .merge_request_pipelines
  - .no_cache_and_dependencies
  script:
  # Lint prose and Markdown
  - make lint-docs VALE_MIN_ALERT_LEVEL=error
  # Prepare docs for build
  - mv docs/ /tmp/gitlab-docs/content/$DOCS_GITLAB_REPO_SUFFIX
  - cd /tmp/gitlab-docs
  # Build HTML from Markdown
  - bundle exec nanoc
  # Check the internal links
  - bundle exec nanoc check internal_links
  # Check the internal anchor links
  - bundle exec nanoc check internal_anchors

check feature flags docs:
  stage: test
  extends:
  - .merge_request_pipelines
  - .no_cache_and_dependencies
  script:
  - cp docs/configuration/feature-flags.md docs/configuration/feature-flags.md.orig
  - make update_feature_flags_docs
  - |
    diff docs/configuration/feature-flags.md.orig docs/configuration/feature-flags.md || (
      echo
      echo "Feature Flags list in documentation is not up-to-date"
      echo "Run 'make update_feature_flags_docs' to upate it"
      echo
      exit 1
    )

check modules:
  stage: test
  extends:
  - .merge_request_pipelines
  - .except_docs
  - .no_cache_and_dependencies
  script:
  - make check_modules

check mocks:
  stage: test
  extends:
  - .merge_request_pipelines
  - .except_docs
  - .no_cache_and_dependencies
  script:
  - make check_mocks

code_quality:
  stage: test
  extends:
  - .merge_request_pipelines
  - .no_cache_and_dependencies
  image: registry.gitlab.com/gitlab-org/ci-cd/runner-tools/runner-linters:v1.27.0-alpine
  needs: []
  variables:
    REPORT_FILE: gl-code-quality-report.json
    LINT_FLAGS: "--issues-exit-code 0 --color never --deadline 15m"
    OUT_FORMAT: code-climate
    GOLANGLINT_VERSION: "" # Don't add version suffix to Makefile's GOLANGLINT (use plain golangci-lint from image)
  before_script:
  # Ensure the goargs linter plugin is available at .tmp/goargs.so to suit .golangci.yml
  - mkdir .tmp && ln -s /usr/lib/goargs.so .tmp/goargs.so
  # Copy the Docker image's golangci-lint to the location expected by `make lint` so that it is not built
  - cp $(which golangci-lint) .tmp/golangci-lint
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
  - make --silent lint | tee ${REPORT_FILE}
  timeout: 15 minutes
  artifacts:
    reports:
      codequality: ${REPORT_FILE}
    paths:
    - ${REPORT_FILE}
    expire_in: 7d

unit test:
  extends:
  - .merge_request_pipelines
  - .docker
  stage: test
  parallel: 8
  script:
  - source ci/touch_make_dependencies
  - make parallel_test_execute
  artifacts:
    paths:
    - .cover/*
    - .testoutput/*
    when: always
    expire_in: 7d

unit test with race:
  extends:
  - unit test
  allow_failure: true
  variables:
    CGO_ENABLED: "1"
    TESTFLAGS: "-cover -race"

.windows test:
  extends:
  - .merge_request_pipelines
  - .except_docs
  stage: test
  parallel: 8
  variables:
    GOROOT: "C:\\Go"
  before_script:
  - if (Test-Path $GOPATH) { Remove-Item -Force -Recurse $GOPATH }
  - New-Item $PKG_BASE_DIR -ItemType directory -Force
  - New-Item -ItemType SymbolicLink -Path $PKG_BUILD_DIR -Value $CI_PROJECT_DIR
  - cd $PKG_BUILD_DIR
  script:
  - .\ci\test_windows.ps1
  after_script:
  - if (Test-Path $PKG_BUILD_DIR) { $(Get-Item $PKG_BUILD_DIR).Delete() }
  artifacts:
    paths:
    - .testoutput/*
    when: always
    expire_in: 7d
  allow_failure: true

windows 1809 tests:
  extends:
  - .windows test
  - .windows1809

windows 1903 tests:
  extends:
  - .windows test
  - .windows1903
  - .runner_master

windows 1909 tests:
  extends:
  - .windows test
  - .windows1909
  - .runner_master

git 1.7.1:
  extends:
  - .merge_request_pipelines
  - .except_docs
  image: centos:6
  stage: test
  variables:
    GOROOT: /usr/local/go
    GOPATH: /go
    CGO_ENABLED: 0
    OUR_PACKAGES: gitlab.com/gitlab-org/gitlab-runner/executors/shell gitlab.com/gitlab-org/gitlab-runner/shells
  before_script:
  - unset GPG_KEY
  - yum install -y -q git && git version
  - curl https://storage.googleapis.com/golang/go1.13.8.linux-amd64.tar.gz | tar zx -C $(dirname "$GOROOT")
  - export PATH=${GOPATH}/bin:${GOROOT}/bin:$PATH
  - source ci/touch_make_dependencies
  script:
  - make simple-test

integration_k8s:
  extends:
    - .merge_request_pipelines
    - .docker
  stage: test
  services:
  - name: registry.gitlab.com/gitlab-org/cluster-integration/test-utils/k3s-gitlab-ci/releases/v1.16.7-k3s1
    alias: k3s
  before_script:
  - curl k3s:8081?service=k3s > k3s.yaml
  - export KUBECONFIG=$(pwd)/k3s.yaml
  - kubectl version
  - kubectl cluster-info
  script:
  - go test -v gitlab.com/gitlab-org/gitlab-runner/executors/kubernetes

