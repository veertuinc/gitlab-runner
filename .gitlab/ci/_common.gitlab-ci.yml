variables:
  CI_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.13.8-12
  GOROOT: /usr/local/go
  # Following variables are used in some jobs to install specified software
  RELEASE_INDEX_GEN_VERSION: "latest"
  DOCKER_VERSION: 20.10.2
  DOCKER_MACHINE_VERSION: "0.16.2"
  BUILDX_VERSION: 0.3.1
  KUBECTL_VERSION: 1.18.0
  AWS_CLI_VERSION: 2.1.6
  # See https://github.com/PowerShell/powershell/releases for values of PWSH_VERSION/PWSH_IMAGE_DATE
  PWSH_VERSION: "7.1.1"
  PWSH_IMAGE_DATE: "20210114"
  PWSH_ALPINE_IMAGE_VERSION: "3.12"
  ALPINE_IMAGE_VERSION: "3.12.0"
  DUMB_INIT_VERSION: "1.2.2"
  GIT_VERSION: "2.27.0"
  GIT_VERSION_BUILD: "1"
  GIT_LFS_VERSION: "2.11.0"
  LICENSE_MANAGEMENT_SETUP_CMD: echo "Skip setup. Dependency already vendored"
  DOCS_GITLAB_REPO_SUFFIX: "runner"
  # We're overriding rules for the jobs that we want to run.
  # This will disable all other rules.
  SAST_DISABLED: "true"
  DEPENDENCY_SCANNING_DISABLED: "true"

default:
  image: $CI_IMAGE
  tags:
  - gitlab-org
  retry:
    max: 2
    when:
    - runner_system_failure

before_script:
- unset GPG_KEY

.no_cache:
  cache: {}

.no_dependencies:
  dependencies: []

.no_cache_and_dependencies:
  extends:
  - .no_cache
  - .no_dependencies

.docker:
  extends:
  - .except_docs
  services:
  - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CERT_PATH: "/certs/client"
  tags:
  - gitlab-org-docker

.docker_qemu-before_script: &docker_qemu-before_script
- docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64

.docker_qemu:
  before_script:
  - *docker_qemu-before_script

.go-cache:
  variables:
    GOCACHE: $CI_PROJECT_DIR/.gocache-$CI_COMMIT_REF_PROTECTED
  before_script:
  - mkdir -p "$GOCACHE"
  cache:
    paths:
    - $CI_PROJECT_DIR/.gocache-false/
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"

.go-cache-docker-qemu:
  extends:
  - .go-cache
  before_script:
  - *docker_qemu-before_script
  - mkdir -p "$GOCACHE"

.go-cache-windows:
  variables:
    GOCACHE: $CI_PROJECT_DIR\.gocache-$CI_COMMIT_REF_PROTECTED
  before_script:
  - New-Item -Path "$Env:GOCACHE" -Type Directory -Force
  cache:
    paths:
    - $CI_PROJECT_DIR\.gocache-false\
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"

.windows_base:
  variables:
    PKG_NAMESPACE: gitlab.com\gitlab-org
    PKG_NAME: gitlab-runner
    GOPATH: "$CI_PROJECT_DIR\\.gopath"
    PKG_BASE_DIR: "$CI_PROJECT_DIR\\.gopath\\src\\$PKG_NAMESPACE"
    PKG_BUILD_DIR: "$CI_PROJECT_DIR\\.gopath\\src\\$PKG_NAMESPACE\\$PKG_NAME"

.windows1809_variables:
  variables:
    WINDOWS_VERSION: servercore1809

.windows1809:
  extends:
  - .windows_base
  - .windows1809_variables
  tags:
  - shared-windows
  - windows
  - windows-1809

.windows1903_variables:
  variables:
    WINDOWS_VERSION: servercore1903

.windows1903:
  extends:
  - .windows_base
  - .windows1903_variables
  tags:
  - windows
  - windows-1903

.windows1909_variables:
  variables:
    WINDOWS_VERSION: servercore1909

.windows1909:
  extends:
  - .windows_base
  - .windows1909_variables
  tags:
  - windows
  - windows-1909

.windows2004_variables:
  variables:
    WINDOWS_VERSION: servercore2004

.windows2004:
  extends:
  - .windows_base
  - .windows2004_variables
  tags:
  - windows
  - windows-2004

# .stage_done is used as a sentinel at stage n for stage n-1 completion, so we can kick off builds in later stages
# without explicitly waiting for the completion of the n-1 stage
.stage_done:
  extends:
  - .merge_request_pipelines
  - .no_cache_and_dependencies
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  script:
  - exit 0
