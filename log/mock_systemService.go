// Code generated by mockery v1.1.0. DO NOT EDIT.

package log

import (
	service "github.com/kardianos/service"
	mock "github.com/stretchr/testify/mock"
)

// mockSystemService is an autogenerated mock type for the systemService type
type mockSystemService struct {
	mock.Mock
}

// Install provides a mock function with given fields:
func (_m *mockSystemService) Install() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logger provides a mock function with given fields: errs
func (_m *mockSystemService) Logger(errs chan<- error) (service.Logger, error) {
	ret := _m.Called(errs)

	var r0 service.Logger
	if rf, ok := ret.Get(0).(func(chan<- error) service.Logger); ok {
		r0 = rf(errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Logger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chan<- error) error); ok {
		r1 = rf(errs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Platform provides a mock function with given fields:
func (_m *mockSystemService) Platform() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Restart provides a mock function with given fields:
func (_m *mockSystemService) Restart() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *mockSystemService) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *mockSystemService) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *mockSystemService) Status() (service.Status, error) {
	ret := _m.Called()

	var r0 service.Status
	if rf, ok := ret.Get(0).(func() service.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(service.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *mockSystemService) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *mockSystemService) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SystemLogger provides a mock function with given fields: errs
func (_m *mockSystemService) SystemLogger(errs chan<- error) (service.Logger, error) {
	ret := _m.Called(errs)

	var r0 service.Logger
	if rf, ok := ret.Get(0).(func(chan<- error) service.Logger); ok {
		r0 = rf(errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Logger)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chan<- error) error); ok {
		r1 = rf(errs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uninstall provides a mock function with given fields:
func (_m *mockSystemService) Uninstall() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
